<% const jsLength = htmlWebpackPlugin.files.js.length; %>
<% for (let i = 0; i < jsLength; i++) { %>
    const panel = Editor.require('<%= htmlWebpackPlugin.files.js[i] %>');
<% } %>

function loadCss (parent, cssPaths) {
if (!Array.isArray(cssPaths)) {
cssPaths = [cssPaths];
}
cssPaths.forEach((cssPath) => {
const link = document.createElement('link')
link.rel = 'stylesheet';
link.href = cssPath;
parent.appendChild(link);
})
}

Editor.Panel.extend({
template:`<%= htmlWebpackPlugin.options.ccPlugin.template %>`,
messages:{},
ready(...args){

<% const cssLength = htmlWebpackPlugin.files.css.length; %>
<% for(let i = 0;i < cssLength;i++){ %>
    loadCss(this.shadowRoot,'<%= htmlWebpackPlugin.files.css[i] %>')
<% } %>

let panelInstance = panel;
if (panel && panel.default) {
panelInstance = panel.default;
}

let targetPanel = panelInstance;
if (typeof panelInstance === 'function') {
targetPanel = new panelInstance();
}

if (targetPanel.hasOwnProperty('ready') &&
typeof targetPanel.ready === 'function') {
targetPanel.ready(this.shadowRoot, args);
}


}
})

